--- 
title: "Ames Housing: 허위매물 탐지 프로젝트"
author: '일단잡1조(송성필, 홍주형, 편서영, 양현준)'
format: 
  dashboard:
    theme: sandstone
    scrolling: True
    logo: igotyou.png
    freeze: true
--- 

# 1장

---

```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LassoCV
from sklearn.model_selection import train_test_split
plt.rcParams['font.family'] = 'Malgun Gothic'
plt.rcParams['axes.unicode_minus'] = False
pd.set_option('display.max_columns', None)


# 데이터 불러오기
ames = pd.read_csv('./ames.csv')

# 복사 및 전처리
df = ames.copy()

df_ns = df.groupby('Neighborhood')['SalePrice'].mean()

# 분위수 계산
q1 = df_ns.quantile(0.25)
q2 = df_ns.quantile(0.75)

df['price_level'] = np.select(
    [
        df['Neighborhood'].isin(df_ns[df_ns <= q1].index),
        df['Neighborhood'].isin(df_ns[(df_ns > q1) & (df_ns <= q2)].index),
        df['Neighborhood'].isin(df_ns[df_ns > q2].index)
    ],
    ['Low', 'Mid', 'High'],
    default=np.nan
)

## 2. 모든 범주형 데이터 결측치 >> None 추가

# 범주형 컬럼만 선택
cat_cols = df.select_dtypes(include='object').columns

# 범주형 결측치 'None'으로 대체
df[cat_cols] = df[cat_cols].fillna('None')


df['amenities'] = (
    (df['PoolArea'] > 0).astype(int) +
    (df['TotalBsmtSF'] > 0).astype(int) +
    (df['GarageArea'] > 0).astype(int) + 
    (df['MiscVal'] > 0).astype(int)
)

df['TotalRooms'] = df['TotRmsAbvGrd'] + df['HalfBath'] + df['FullBath']  # 욕실 제외 방수 + 반욕실 + 풀욕실
df['RoomDensity'] = df['TotalRooms'] / df['GrLivArea']  # 방 밀도 (방수 / 거실 면적)

## 3. 허위매물 판단 조건 설정 - 기준값 상위 25% 이상
df['GrLivArea_th']    = df.groupby('price_level')['GrLivArea']   \
                           .transform(lambda x: x.quantile(0.75))
df['YearRemodAdd_th'] = df.groupby('price_level')['YearRemodAdd']\
                           .transform(lambda x: x.quantile(0.75))
df['RoomDensity_th']  = df.groupby('price_level')['RoomDensity'] \
                           .transform(lambda x: x.quantile(0.75))


# 지역들 분리하는 df 생성
high_df = df[df['price_level'] == 'High'].copy()
mid_df  = df[df['price_level'] == 'Mid'].copy()
low_df  = df[df['price_level'] == 'Low'].copy()

```

# 2장

## Columns

<div style="border: 2px solid #DC143C; border-radius: 15px; padding: 15px; background-color: #fff5f5;">
  <span style="font-size: 25px; font-weight: bold; color: #DC143C;">
    📌 분석 과정
  </span><br><br>
  6가지 조건을 바탕으로 점수를 부여하고, 3점 이상에 해당되는 허위매물을 추출한다. <br>
  이후 회귀 모델을 통해 허위매물을 추출한 뒤, 공통 허위매물을 추출한다.
  <br><br>

</div>

## Row
:::{.card} 
<span style="font-size: 35px;">
🏘 가격 별 그룹 분류
</span>

```{python}
# 가격 수준별 SalePrice 분포
import plotly.express as px
fig = px.histogram(df, x='SalePrice', 
                    color='price_level', 
                    opacity=0.6)
fig.show()

```

:::

## Row {.tabset}
:::{.card}
```{python}
# 그룹별 시각화 : 박스플롯
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# 서브플롯 생성 (가로로 3개)
fig1 = make_subplots(rows=1, cols=3, subplot_titles=("GrLivArea by Price Level", 
                                                    "YearRemodAdd by Price Level", 
                                                    "RoomDensity by Price Level"))

# GrLivArea
for level in df['price_level'].unique():
    fig1.add_trace(
        go.Box(y=df[df['price_level'] == level]['GrLivArea'],
               name=level,
               boxmean=True),
        row=1, col=1
    )
# YearRemodAdd
for level in df['price_level'].unique():
    fig1.add_trace(
        go.Box(y=df[df['price_level'] == level]['YearRemodAdd'],
               name=level,
               boxmean=True),
        row=1, col=2
    )
# RoomDensity
for level in df['price_level'].unique():
    fig1.add_trace(
        go.Box(y=df[df['price_level'] == level]['RoomDensity'],
               name=level,
               boxmean=True),
        row=1, col=3
    )

# 전체 레이아웃 설정
fig1.update_layout(
    height=500, width=1200,
    showlegend=False
)

fig1.show();
```

<span style="font-size: 25px;">
  ✔**GrLivArea** : 지상층 면적 <br>
  ✔**YearRemodAdd** : 리모델링 <br>
  ✔**RoomDensity** : 방 밀도 (방수/면적)
<span>

:::

:::{.card}
```{python}
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# 서브플롯 생성: 3행 3열
fig2 = make_subplots(
    rows=3, cols=3,
    subplot_titles=[
        'OverallQual - Low', 'OverallQual - Mid', 'OverallQual - High',
        'OverallCond - Low', 'OverallCond - Mid', 'OverallCond - High',
        'Amenities - Low', 'Amenities - Mid', 'Amenities - High'
    ]
)
# 변수 리스트 및 시각화 세팅
variables = ['OverallQual', 'OverallCond', 'amenities']
colors = ['skyblue', 'salmon', 'lightgreen']
bins_dict = {
    'OverallQual': list(range(1, 11)),
    'OverallCond': list(range(1, 11)),
    'amenities': list(range(0, 6))
}
# 그래프 추가
for row, var in enumerate(variables, start=1):
    for col, level in enumerate(['Low', 'Mid', 'High'], start=1):
        subset = df[df['price_level'] == level]
        fig2.add_trace(
            go.Histogram(
                x=subset[var],
                xbins=dict(
                    start=min(bins_dict[var]),
                    end=max(bins_dict[var]),
                    size=1
                ),
                marker_color=colors[row-1],
                name=f'{var} - {level}',
                showlegend=False
            ),
            row=row, col=col
        )
# 전체 레이아웃 조정
fig2.update_layout(
    height=900, width=1000,
    bargap=0.1
)

fig2.show();

```

<span style="font-size: 25px;">
  ✔**OverallQual** : 지상층 면적 <br>
  ✔**OverallCond** : 리모델링 <br>
  ✔**Amenities** : 방 밀도 (방수/면적)
</span>

:::

## Row

```{python}
# High 그룹
high_med      = high_df['SalePrice'].median()
high_area_th  = high_df['GrLivArea'].quantile(0.75)
high_remod_th = high_df['YearRemodAdd'].quantile(0.75)
high_den_th   = high_df['RoomDensity'].quantile(0.75)

high_df['flag_high_qual']      = (high_df['OverallQual']  >= 9).astype(int)
high_df['flag_good_condition'] = (high_df['OverallCond']  >= 6).astype(int)
high_df['flag_high_area']      = (high_df['GrLivArea']    >= high_area_th ).astype(int)
high_df['flag_high_remod']     = (high_df['YearRemodAdd'] >= high_remod_th).astype(int)
high_df['flag_high_density']   = (high_df['RoomDensity']  >= high_den_th  ).astype(int)
high_df['flag_high_amenities'] = (high_df['amenities']    >= 3            ).astype(int)

# Mid 그룹
mid_med      = mid_df['SalePrice'].median()
mid_area_th  = mid_df['GrLivArea'].quantile(0.75)
mid_remod_th = mid_df['YearRemodAdd'].quantile(0.75)
mid_den_th   = mid_df['RoomDensity'].quantile(0.75)

mid_df['flag_mid_qual']        = (mid_df['OverallQual']  >= 8).astype(int)
mid_df['flag_good_condition']  = (mid_df['OverallCond']  >= 6).astype(int)
mid_df['flag_mid_area']        = (mid_df['GrLivArea']    >= mid_area_th ).astype(int)
mid_df['flag_mid_remod']       = (mid_df['YearRemodAdd'] >= mid_remod_th).astype(int)
mid_df['flag_mid_density']     = (mid_df['RoomDensity']  >= mid_den_th  ).astype(int)
mid_df['flag_mid_amenities']   = (mid_df['amenities']    >= 3            ).astype(int)

# Low 그룹
low_med      = low_df['SalePrice'].median()
low_area_th  = low_df['GrLivArea'].quantile(0.75)
low_remod_th = low_df['YearRemodAdd'].quantile(0.75)
low_den_th   = low_df['RoomDensity'].quantile(0.75)

low_df['flag_low_qual']        = (low_df['OverallQual']  >= 7).astype(int)
low_df['flag_good_condition']  = (low_df['OverallCond']  >= 8).astype(int)
low_df['flag_low_area']        = (low_df['GrLivArea']    >= low_area_th ).astype(int)
low_df['flag_low_remod']       = (low_df['YearRemodAdd'] >= low_remod_th).astype(int)
low_df['flag_low_density']     = (low_df['RoomDensity']  >= low_den_th  ).astype(int)
low_df['flag_low_amenities']   = (low_df['amenities']    >= 3            ).astype(int)

for name, gdf, med in [
    ('High', high_df, high_med),
    ('Mid',  mid_df,  mid_med),
    ('Low',  low_df,  low_med),
]:
    # Median 이하인 매물만 복사본으로
    filt = gdf.loc[gdf['SalePrice'] <= med].copy()
    
    # 이 그룹의 flag 컬럼 리스트
    flags = [c for c in filt.columns 
             if c.startswith(f'flag_{name.lower()}') or c == 'flag_good_condition']

# (1) score 계산: 6가지 조건을 한 줄로 집계
qual_th = {'Low':7,'Mid':8,'High':9}
cond_th = {'Low':8,'Mid':6,'High':6}

df['score'] = df.apply(lambda r: 
    int(r['OverallQual']  >= qual_th[r['price_level']]) +
    int(r['OverallCond']  >= cond_th [r['price_level']]) +
    int(r['GrLivArea']    >= r['GrLivArea_th']) +
    int(r['YearRemodAdd'] >= r['YearRemodAdd_th']) +
    int(r['RoomDensity']  >= r['RoomDensity_th']) +
    int(r['amenities']    >= 3),
    axis=1
)

# (2) 그룹별 중위값 이하 여부
median_price = df.groupby('price_level')['SalePrice'].transform('median')

# (3) suspect_flag 생성
df['suspect_flag'] = (df['SalePrice'] <= median_price) & (df['score'] >= 3)

# (4) 허위매물 후보만 추출
suspect_df = df[df['suspect_flag']].copy()


```

```{python}
from IPython.display import display, HTML

html_table = """
<div style="display: flex; flex-direction: row; gap: 20px; justify-content: space-between;">
  <div style="width: 33%; padding: 10px; border: 2px solid #4CAF50; border-radius: 15px; background-color: #e8f5e9;">
    <span style="font-size: 32px; font-weight: bold; color: #4CAF50;">📊 **High 그룹 분석**</span>
    <br><br>
    <strong style="font-size: 24px;">조건 플래그:</strong><br>
    <ul style="font-size: 20px;">
      <li>flag_high_qual: 3</li>
      <li>flag_good_condition: 22</li>
      <li>flag_high_area: 10</li>
      <li>flag_high_remod: 76</li>
      <li>flag_high_density: 93</li>
      <li>flag_high_amenities: 3</li>
    </ul>
    <br>
    <strong style="font-size: 24px;">Score 분포:</strong><br>
    <ul style="font-size: 20px;">
      <li>0: 76</li>
      <li>1: 103</li>
      <li>2: 47</li>
      <li>3: 2</li>
      <li>4: 1</li>
    </ul>
    <br>
    <strong style="font-size: 24px;">Score ≥ 3인 건수: 3건</strong>
  </div>

  <div style="width: 33%; padding: 10px; border: 2px solid #2196F3; border-radius: 15px; background-color: #e3f2fd;">
    <span style="font-size: 32px; font-weight: bold; color: #2196F3;">📊 **Mid 그룹 분석**</span>
    <br><br>
    <strong style="font-size: 24px;">조건 플래그:</strong><br>
    <ul style="font-size: 20px;">
      <li>flag_mid_qual: 2</li>
      <li>flag_good_condition: 366</li>
      <li>flag_mid_area: 53</li>
      <li>flag_mid_remod: 107</li>
      <li>flag_mid_density: 296</li>
      <li>flag_mid_amenities: 37</li>
    </ul>
    <br>
    <strong style="font-size: 24px;">Score 분포:</strong><br>
    <ul style="font-size: 20px;">
      <li>0: 158</li>
      <li>1: 348</li>
      <li>2: 172</li>
      <li>3: 51</li>
      <li>4: 4</li>
    </ul>
    <br>
    <strong style="font-size: 24px;">Score ≥ 3인 건수: 55건</strong>
  </div>

  <div style="width: 33%; padding: 10px; border: 2px solid #FF5722; border-radius: 15px; background-color: #ffebee;">
    <span style="font-size: 32px; font-weight: bold; color: #FF5722;">📊 **Low 그룹 분석**</span>
    <br><br>
    <strong style="font-size: 24px;">조건 플래그:</strong><br>
    <ul style="font-size: 20px;">
      <li>flag_low_qual: 4</li>
      <li>flag_good_condition: 30</li>
      <li>flag_low_area: 24</li>
      <li>flag_low_remod: 59</li>
      <li>flag_low_density: 131</li>
      <li>flag_low_amenities: 10</li>
    </ul>
    <br>
    <strong style="font-size: 24px;">Score 분포:</strong><br>
    <ul style="font-size: 20px;">
      <li>0: 133</li>
      <li>1: 155</li>
      <li>2: 30</li>
      <li>3: 13</li>
      <li>4: 1</li>
    </ul>
    <br>
    <strong style="font-size: 24px;">Score ≥ 3인 건수: 14건</strong>
  </div>
</div>
"""

display(HTML(html_table))

```

# 3장

## Row {height=30%}
### {width=50%}

<div style="border: 2px solid #DC143C; border-radius: 15px; padding: 15px; background-color: #fff5f5;">
  <span style="font-size: 25px; font-weight: bold; color: #DC143C;">
    ❗ 조건 플래그 결과
  </span><br><br>
  72건의 허위매물 의심 후보 추출 <br>
  우측 지도를 통해 그룹별 허위매물 분포 확인 가능함
  <br><br>

</div>


### {width=50%}

```{python}
import plotly.express as px

center = {
    "lat": suspect_df["Latitude"].mean(),
    "lon": suspect_df["Longitude"].mean()
}

fig = px.scatter_mapbox(
    suspect_df,
    lat="Latitude",
    lon="Longitude",
    color="price_level",
    size="SalePrice",  # 마커 크기를 판매 가격에 따라 설정
    hover_name="Neighborhood",
    hover_data=["SalePrice", "GrLivArea"],
    labels={
        "Latitude": "위도",
        "Longitude": "경도",
        "price_level": "동네 가격 수준",
        "Neighborhood": "지역(동네)",
        "SalePrice": "판매 가격($)",
        "GrLivArea": "거실 면적(ft²)"
    },
    zoom=12,                    
    center=center,              
    height=600,
    mapbox_style="open-street-map",
    title="Ames Housing: Price Level by Neighborhood (확대)"
)

fig.show()

```

## Row {height=20%}
### {width=30%}






### {width=70%}


